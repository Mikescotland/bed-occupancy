binary_sensor:
- platform: template
  name: Bed Occupied Left (Fast)
  id: bed_occupied_left_fast
  device_class: occupancy
  icon: mdi:bed
  disabled_by_default: true
  filters:
  - delayed_off: ${fast_delayed_off}  # prevent shifting in bed from registering "off"
  lambda: return id(bed_sensor_left).state > id(val_trigger_left).state;

- platform: template
  name: Bed Occupied Left
  id: bed_occupied_left
  device_class: occupancy
  icon: mdi:bed
  filters:
  - delayed_on_off: 4s                # ensure stability
  lambda: return id(bed_sensor_left).state > id(val_trigger_left).state;

- platform: template
  name: Bed Occupied Both Sides (Fast)
  id: bed_occupied_both_fast
  device_class: occupancy
  icon: mdi:bunk-bed
  disabled_by_default: true
  lambda: return id(bed_occupied_left_fast).state && id(bed_occupied_right_fast).state;

- platform: template
  name: Bed Occupied Any Side (Fast)
  id: bed_occupied_either_fast
  device_class: occupancy
  icon: mdi:bunk-bed
  disabled_by_default: true
  lambda: return id(bed_occupied_left_fast).state || id(bed_occupied_right_fast).state;

- platform: template
  name: Bed Occupied Both Sides
  id: bed_occupied_both
  device_class: occupancy
  icon: mdi:bunk-bed
  lambda: return id(bed_occupied_left).state && id(bed_occupied_right).state;

- platform: template
  name: Bed Occupied Any Side
  id: bed_occupied_either
  device_class: occupancy
  icon: mdi:bunk-bed
  lambda: return id(bed_occupied_left).state || id(bed_occupied_right).state;


sensor:
- platform: pulse_counter
  pin: GPIO4
  name: Left Pressure
  id: bed_sensor_left
  update_interval: 0.5s
  unit_of_measurement: '%'
  icon: mdi:gauge
  filters:
  - calibrate_linear:             # scale pulses/minute to 0->100%
      method: least_squares
      datapoints:
        - ${initial_high_value}.0 -> 100.0         # 50000Hz (sensor shorted/0ohms)
        - ${initial_low_value}.0 -> 0.0           # 4600Hz (breakforce/10k)
  
  - clamp:
      max_value: 100.0
      min_value: 0.0
  - or:
    - delta: 1                  # only send if sensor changes by +/-1% (eliminate sensor noise)
    - throttle: 60s               # but still update every minute
- platform: pulse_counter
  pin: GPIO2
  name: Right Pressure
  id: bed_sensor_right
  update_interval: 0.5s
  unit_of_measurement: '%'
  icon: mdi:gauge
  filters:
  - calibrate_linear:             # scale pulses/minute to 0->100%
      method: least_squares
      datapoints:
        - ${initial_high_value}.0 -> 100.0         # 50000Hz (sensor shorted/0ohms)
        - ${initial_low_value}.0 -> 0.0           # 4600Hz (breakforce/10k)
  
  - clamp:
      max_value: 100.0
      min_value: 0.0
  - or:
    - delta: 1                  # only send if sensor changes by +/-1% (eliminate sensor noise)
    - throttle: 60s               # but still update every minute

- platform: uptime
  type: seconds
  id: bed_presence_uptime
  name: "Uptime"
- platform: wifi_signal
  name: "WiFi Signal"
  id: wifi_signal_dBm
  update_interval: 30s
- platform: copy # Reports the WiFi signal strength in %
  source_id: wifi_signal_dBm
  name: "WiFi Signal Percent"
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "%"
  entity_category: "diagnostic"
  device_class: ""
number:
- platform: template
  name: Left Unoccupied Pressure
  id: val_unoccupied_left
  icon: mdi:gauge-empty
  unit_of_measurement: '%'
  entity_category: diagnostic
  optimistic: true
  restore_value: true
  initial_value: 0
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger
        // id(val_unoccupied_status_left}).publish_state(x);
        id(update_trigger_left})->execute();
        
- platform: template
  name: Left Occupied Pressure
  id: val_occupied_left
  icon: mdi:gauge-full
  unit_of_measurement: '%'
  entity_category: diagnostic
  optimistic: true
  restore_value: true
  initial_value: 100
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger
        // id(val_occupied_status_left).publish_state(x);
        id(update_trigger_left)->execute();
- platform: template
  name: ${sensor_name} Trigger Pressure
  id: val_trigger_left
  optimistic: true
  restore_value: true
  initial_value: 50
  min_value: 0
  max_value: 100
  step: 0.1
  icon: mdi:gauge
  unit_of_measurement: '%'
  entity_category: config

button:
- platform: template
  name: Calibrate Left Unoccupied
  id: calibration_left_set_unoccupied
  icon: mdi:bed-empty
  entity_category: config
  on_press:
    then:
    - number.set:
        id: val_unoccupied_left
        value: !lambda return id(bed_sensor_left}).state;
- platform: template
  name: Calibrate Left Occupied
  id: calibration_left_set_occupied
  icon: mdi:bed
  entity_category: config
  on_press:
    then:
    - number.set:
        id: val_occupied_left
        value: !lambda return id(bed_sensor_left).state;
- platform: restart
  name: Restart
  id: btn_restart
  entity_category: "diagnostic"

script:
- id: update_trigger_left
  mode: queued
  then:
  - lambda: |-  # Set trigger to x% of difference between min/max
      float unoccupied_pressure = id(val_unoccupied_left).state;
      float occupied_pressure = id(val_occupied_left).state;

      // calculate new trigger value
      float trigger_pressure = unoccupied_pressure + ((occupied_pressure - unoccupied_pressure) * float(${trigger_percentile}));

      // round to 2 decimal places
      trigger_pressure = round(trigger_pressure * 100)/100.0;

      // set value
      auto call = id(val_trigger_left).make_call();
      call.set_value(trigger_pressure);
      call.perform();
select:
- platform: template
  name: Sensitivity Left
  id: sensitivity_left
  restore_value: true
  options:
    - Low
    - Medium
    - High
  optimistic: true
  entity_category: config

  
globals:
- id: low_value
  type: float
  restore_value: yes
  initial_value: '${initial_low_value}'
- id: high_value
  type: float
  restore_value: yes
  initial_value: '${initial_high_value}'
substitutions:
  initial_low_value: "11000"
  initial_high_value: "70000"







